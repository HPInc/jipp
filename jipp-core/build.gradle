apply plugin: 'kotlin'
apply plugin: 'java-library'
apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'io.gitlab.arturbosch.detekt'
apply plugin: 'maven-publish'
apply plugin: 'signing'

dependencies {
    // Transitively supply all kotlin APIs to our users
    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.15.0'
}

targetCompatibility = 1.8
sourceCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileKotlin.kotlinOptions.allWarningsAsErrors = true

// This hack puts testing resource files where we can get to them
task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources/printer"
    into "${buildDir}/classes/test/printer"
}
processTestResources.dependsOn copyTestResources
task cleanTestResources(type: Delete) {
    delete fileTree("${buildDir}/classes/test/printer") {
        include '**/*.bin'
    }
}

test.finalizedBy cleanTestResources

test {
    testLogging {
        events "failed"
        showExceptions = true
        exceptionFormat = "full"
    }
}

test.finalizedBy jacocoTestReport

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/AutoValue_**',
                              '**/pwg/**'])
        })
    }
}

detekt {
    profile("main") {
        baseline = "$projectDir/src/config/baseline.xml"
        input = "$projectDir/src/main"
        output = "$buildDir/reports/detekt"
    }
}

// Graph dependencies
task graphDeps(type: Exec, dependsOn: classes) {
    commandLine 'bin/graphDeps'
}

configure(graphDeps) {
    group = "Verification"
    description = "Create a dependency graph"
}

dokka {
    outputDirectory = "$buildDir/javadoc"
    outputFormat = "javadoc"
    externalDocumentationLink {
        url = new URL("http://docs.oracle.com/javase/8/docs/api/")
    }
}

ktlint {
    version = ktlint_version
}

afterEvaluate {
    check.dependsOn ktlintCheck
    check.dependsOn detektCheck
}

task sourceJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = "javadoc"
    from dokka.outputDirectory
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    required { gradle.taskGraph.hasTask("publish") }
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId "com.hp.jipp"
            artifactId project.name

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]

                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }

            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }

    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username project.ext.properties.sonatypeUsername
                password project.ext.properties.sonatypePassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = DELEGATE_FIRST

            description 'Parse/build IPP packets'
            name project.name
            url 'https://github.com/HPInc/jipp'
            organization {
                name 'HP Development Company, L.P.'
                url 'https://github.com/HPInc'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/HPInc/jipp/issues'
            }
            licenses {
                license {
                    name 'MIT'
                    url 'https://github.com/HPInc/jipp/blob/master/LICENSE.md'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/HPInc/jipp'
                connection 'scm:git:git://github.com/HPInc/jipp.git'
                developerConnection 'scm:git:ssh://git@github.com:HPInc/jipp.git'
            }
            developers {
                developer {
                    name 'Glade Diviney'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }

    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }

    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
}
