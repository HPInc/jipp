{%- if not noheader -%}
// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by {{ app }}. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on {{ updated }}
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

{%- endif %}

/**
 * Data object corresponding to a "{{ collection.name }}" collection{%- if collection.specs %} as defined in:{%- for spec in collection.specs | sort %}
 * [{{ spec | upper }}]({{ specs[spec] }}){{ "," if not loop.last }}{%- endfor %}{%- else %}{%- endif %}.{%- if collection['refs']%}
 *
 * Also used by:{%- for ref in collection['refs'] | sort %}
 *   * `{{ ref }}`{%- endfor%}{%- endif %}
 */
@Suppress("RedundantCompanionReference", "unused")
data class {{ collection.name | camel_class }}
@JvmOverloads constructor(
{%- for name, member in collection.members | dictsort %}
{%- if member.kdoc %}
    /** {{ member.kdoc }} */
{%- endif %}
    val {{ name | camel_member }}: {%- if member.set %} List<{{ member.ktype }}>{% else %} {{ member.ktype }}{% endif %}? = null,
{%- endfor %}
    /** Encoded form, if known. */
    val _encoded: List<Attribute<*>>? = null
) : AttributeCollection {

    /** Produce an attribute list from members, or return the original [_encoded] attribute list if present. */
    override val attributes: List<Attribute<*>> by lazy {
        _encoded ?: listOfNotNull(
{%- for name, member in collection.members | dictsort %}
            {{ name | camel_member }}?.let { Members.{{ name | camel_member }}.{%- if member.ksetof and member.set %}{{ member.ksetof }}{%- else %}of{%- endif %}(it) }{{"," if not loop.last }}
{%- endfor %}
        )
    }

    /** Type for attributes of this collection */
    class Type(override val name: String) : AttributeCollection.Type<{{ collection.name | camel_class }}>(Members)

    /** All member names as strings. */
    object Name {
        {%- for name, member in collection.members | dictsort %}
        /** "{{ member.name }}" member name */
        const val {{ member.name | camel_member }} = "{{ member.name }}"
        {%- endfor %}
    }

    /** Builder for immutable [{{ name | camel_class }}] objects. */
    class Builder() {
        /** Constructs a new [Builder] pre-initialized with values in [source]. */
        constructor(source: {{ name | camel_class }}) : this() {
{%- for name, member in collection.members | dictsort %}
            {{ name | camel_member }} = source.{{ name | camel_member }}
{%- endfor %}
        }

{%- for name, member in collection.members | dictsort %}
{%- if member.kdoc %}
        /** {{ member.kdoc }} */
{%- endif %}
        var {{ name | camel_member }}: {%- if member.set %} List<{{ member.ktype }}>{% else %} {{ member.ktype }}{% endif %}? = null
{%- endfor %}

        /** Return a new [{{ name | camel_class }}] object containing all values initialized in this builder. */
        fun build() = {{ name | camel_class }}(
{%- for name, member in collection.members | dictsort %}
            {{ name | camel_member }}{{ "," if not loop.last }}
{%- endfor %}
        )
    }

    companion object Members : AttributeCollection.Converter<{{ collection.name | camel_class }}> {
        override fun convert(attributes: List<Attribute<*>>): {{ collection.name | camel_class }} =
            {{ collection.name | camel_class }}(
{%- for name, member in collection.members | dictsort %}
 {%- if member.set %}
                extractAll(attributes, {{ name | camel_member }})
  {%- if member.ktype_accessor %}?.map { it.{{ member.ktype_accessor }} }{%- endif %},
 {%- else %}
                extractOne(attributes, {{ name | camel_member }})
  {%- if member.ktype_accessor %}?.{{ member.ktype_accessor }}{%- endif %},
 {%- endif %}
{%- endfor %}
                _encoded = attributes)

{%- for name, member in collection.members | dictsort %}
        /**
         * "{{ member.name }}" member type. {%- if member.kdoc %}
         * {{ member.kdoc }}{%- endif %}
         */
        @JvmField val {{ member.name | camel_member }} = {{ member.kintro }}Name.{{ member.name | camel_member }})
{%- endfor %}
    }

{%- for name, member in collection.members | dictsort %}{%- if member.kimpl %}

{{ member.kimpl }}{%- endif %}{%- endfor %}
}

