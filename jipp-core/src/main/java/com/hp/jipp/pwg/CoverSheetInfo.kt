// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "cover-sheet-info" collection as defined in:
 * [PWG5100.15](http://ftp.pwg.org/pub/pwg/candidates/cs-ippfaxout10-20131115-5100.15.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class CoverSheetInfo
@JvmOverloads constructor(
    val fromName: String? = null,
    val logo: java.net.URI? = null,
    val message: String? = null,
    val organizationName: String? = null,
    val subject: String? = null,
    val toName: String? = null,
    /** Encoded form, if known. */
    val _encoded: List<Attribute<*>>? = null
) : AttributeCollection {

    /** Produce an attribute list from members, or return the original [_encoded] attribute list if present. */
    override val attributes: List<Attribute<*>> by lazy {
        _encoded ?: listOfNotNull(
            fromName?.let { Members.fromName.of(it) },
            logo?.let { Members.logo.of(it) },
            message?.let { Members.message.of(it) },
            organizationName?.let { Members.organizationName.of(it) },
            subject?.let { Members.subject.of(it) },
            toName?.let { Members.toName.of(it) }
        )
    }

    /** Type for attributes of this collection */
    class Type(override val name: String) : AttributeCollection.Type<CoverSheetInfo>(Members)

    /** All member names as strings. */
    object Name {
        /** "from-name" member name */
        const val fromName = "from-name"
        /** "logo" member name */
        const val logo = "logo"
        /** "message" member name */
        const val message = "message"
        /** "organization-name" member name */
        const val organizationName = "organization-name"
        /** "subject" member name */
        const val subject = "subject"
        /** "to-name" member name */
        const val toName = "to-name"
    }

    /** Builder for immutable [CoverSheetInfo] objects. */
    class Builder() {
        /** Constructs a new [Builder] pre-initialized with values in [source]. */
        constructor(source: CoverSheetInfo) : this() {
            fromName = source.fromName
            logo = source.logo
            message = source.message
            organizationName = source.organizationName
            subject = source.subject
            toName = source.toName
        }
        var fromName: String? = null
        var logo: java.net.URI? = null
        var message: String? = null
        var organizationName: String? = null
        var subject: String? = null
        var toName: String? = null

        /** Return a new [CoverSheetInfo] object containing all values initialized in this builder. */
        fun build() = CoverSheetInfo(
            fromName,
            logo,
            message,
            organizationName,
            subject,
            toName
        )
    }

    companion object Members : AttributeCollection.Converter<CoverSheetInfo> {
        override fun convert(attributes: List<Attribute<*>>): CoverSheetInfo =
            CoverSheetInfo(
                extractOne(attributes, fromName)?.value,
                extractOne(attributes, logo),
                extractOne(attributes, message)?.value,
                extractOne(attributes, organizationName)?.value,
                extractOne(attributes, subject)?.value,
                extractOne(attributes, toName)?.value,
                _encoded = attributes)
        /**
         * "from-name" member type.
         */
        @JvmField val fromName = TextType(Name.fromName)
        /**
         * "logo" member type.
         */
        @JvmField val logo = UriType(Name.logo)
        /**
         * "message" member type.
         */
        @JvmField val message = TextType(Name.message)
        /**
         * "organization-name" member type.
         */
        @JvmField val organizationName = TextType(Name.organizationName)
        /**
         * "subject" member type.
         */
        @JvmField val subject = TextType(Name.subject)
        /**
         * "to-name" member type.
         */
        @JvmField val toName = TextType(Name.toName)
    }
}
