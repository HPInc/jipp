// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "media-col-ready" collection as defined in:
 * [PWG5100.13](http://ftp.pwg.org/pub/pwg/candidates/cs-ippjobprinterext3v10-20120727-5100.13.pdf),
 * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class MediaColReady
@JvmOverloads constructor(
    val mediaSourceProperties: MediaSourceProperties? = null,
    /** Encoded form, if known. */
    val _encoded: List<Attribute<*>>? = null
) : AttributeCollection {

    /** Produce an attribute list from members, or return the original [_encoded] attribute list if present. */
    override val attributes: List<Attribute<*>> by lazy {
        _encoded ?: listOfNotNull(
            mediaSourceProperties?.let { Members.mediaSourceProperties.of(it) }
        )
    }

    /** Type for attributes of this collection */
    class Type(override val name: String) : AttributeCollection.Type<MediaColReady>(Members)

    /** All member names as strings. */
    object Name {
        /** "media-source-properties" member name */
        const val mediaSourceProperties = "media-source-properties"
    }

    /** Builder for immutable [MediaColReady] objects. */
    class Builder() {
        /** Constructs a new [Builder] pre-initialized with values in [source]. */
        constructor(source: MediaColReady) : this() {
            mediaSourceProperties = source.mediaSourceProperties
        }
        var mediaSourceProperties: MediaSourceProperties? = null

        /** Return a new [MediaColReady] object containing all values initialized in this builder. */
        fun build() = MediaColReady(
            mediaSourceProperties
        )
    }

    companion object Members : AttributeCollection.Converter<MediaColReady> {
        override fun convert(attributes: List<Attribute<*>>): MediaColReady =
            MediaColReady(
                extractOne(attributes, mediaSourceProperties),
                _encoded = attributes)
        /**
         * "media-source-properties" member type.
         */
        @JvmField val mediaSourceProperties = MediaSourceProperties.Type(Name.mediaSourceProperties)
    }

    /**
     * Data object corresponding to a "media-source-properties" collection.
     */
    @Suppress("RedundantCompanionReference", "unused")
    data class MediaSourceProperties
    @JvmOverloads constructor(
        /** May contain any keyword from [FeedOrientation]. */
        val mediaSourceFeedDirection: String? = null,
        val mediaSourceFeedOrientation: Orientation? = null,
        /** Encoded form, if known. */
        val _encoded: List<Attribute<*>>? = null
    ) : AttributeCollection {

        /** Produce an attribute list from members, or return the original [_encoded] attribute list if present. */
        override val attributes: List<Attribute<*>> by lazy {
            _encoded ?: listOfNotNull(
                mediaSourceFeedDirection?.let { Members.mediaSourceFeedDirection.of(it) },
                mediaSourceFeedOrientation?.let { Members.mediaSourceFeedOrientation.of(it) }
            )
        }

        /** Type for attributes of this collection */
        class Type(override val name: String) : AttributeCollection.Type<MediaSourceProperties>(Members)

        /** All member names as strings. */
        object Name {
            /** "media-source-feed-direction" member name */
            const val mediaSourceFeedDirection = "media-source-feed-direction"
            /** "media-source-feed-orientation" member name */
            const val mediaSourceFeedOrientation = "media-source-feed-orientation"
        }

        /** Builder for immutable [MediaSourceProperties] objects. */
        class Builder() {
            /** Constructs a new [Builder] pre-initialized with values in [source]. */
            constructor(source: MediaSourceProperties) : this() {
                mediaSourceFeedDirection = source.mediaSourceFeedDirection
                mediaSourceFeedOrientation = source.mediaSourceFeedOrientation
            }
            /** May contain any keyword from [FeedOrientation]. */
            var mediaSourceFeedDirection: String? = null
            var mediaSourceFeedOrientation: Orientation? = null

            /** Return a new [MediaSourceProperties] object containing all values initialized in this builder. */
            fun build() = MediaSourceProperties(
                mediaSourceFeedDirection,
                mediaSourceFeedOrientation
            )
        }

        companion object Members : AttributeCollection.Converter<MediaSourceProperties> {
            override fun convert(attributes: List<Attribute<*>>): MediaSourceProperties =
                MediaSourceProperties(
                    extractOne(attributes, mediaSourceFeedDirection),
                    extractOne(attributes, mediaSourceFeedOrientation),
                    _encoded = attributes)
            /**
             * "media-source-feed-direction" member type.
             * May contain any keyword from [FeedOrientation].
             */
            @JvmField val mediaSourceFeedDirection = KeywordType(Name.mediaSourceFeedDirection)
            /**
             * "media-source-feed-orientation" member type.
             */
            @JvmField val mediaSourceFeedOrientation = Orientation.Type(Name.mediaSourceFeedOrientation)
        }
    }
}
