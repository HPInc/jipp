// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "document-access" collection as defined in:
 * [PWG5100.18](http://ftp.pwg.org/pub/pwg/candidates/cs-ippinfra10-20150619-5100.18.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class DocumentAccess
@JvmOverloads constructor(
    val accessOauthToken: List<ByteArray>? = null,
    val accessOauthUri: java.net.URI? = null,
    val accessPassword: String? = null,
    val accessPin: String? = null,
    val accessUserName: String? = null,
    val accessX509Certificate: List<ByteArray>? = null,
    /** Encoded form, if known. */
    val _encoded: List<Attribute<*>>? = null
) : AttributeCollection {

    /** Produce an attribute list from members, or return the original [_encoded] attribute list if present. */
    override val attributes: List<Attribute<*>> by lazy {
        _encoded ?: listOfNotNull(
            accessOauthToken?.let { Members.accessOauthToken.of(it) },
            accessOauthUri?.let { Members.accessOauthUri.of(it) },
            accessPassword?.let { Members.accessPassword.of(it) },
            accessPin?.let { Members.accessPin.of(it) },
            accessUserName?.let { Members.accessUserName.of(it) },
            accessX509Certificate?.let { Members.accessX509Certificate.of(it) }
        )
    }

    /** Type for attributes of this collection */
    class Type(override val name: String) : AttributeCollection.Type<DocumentAccess>(Members)

    /** All member names as strings. */
    object Name {
        /** "access-oauth-token" member name */
        const val accessOauthToken = "access-oauth-token"
        /** "access-oauth-uri" member name */
        const val accessOauthUri = "access-oauth-uri"
        /** "access-password" member name */
        const val accessPassword = "access-password"
        /** "access-pin" member name */
        const val accessPin = "access-pin"
        /** "access-user-name" member name */
        const val accessUserName = "access-user-name"
        /** "access-x509-certificate" member name */
        const val accessX509Certificate = "access-x509-certificate"
    }

    /** Builder for immutable [DocumentAccess] objects. */
    class Builder() {
        /** Constructs a new [Builder] pre-initialized with values in [source]. */
        constructor(source: DocumentAccess) : this() {
            accessOauthToken = source.accessOauthToken
            accessOauthUri = source.accessOauthUri
            accessPassword = source.accessPassword
            accessPin = source.accessPin
            accessUserName = source.accessUserName
            accessX509Certificate = source.accessX509Certificate
        }
        var accessOauthToken: List<ByteArray>? = null
        var accessOauthUri: java.net.URI? = null
        var accessPassword: String? = null
        var accessPin: String? = null
        var accessUserName: String? = null
        var accessX509Certificate: List<ByteArray>? = null

        /** Return a new [DocumentAccess] object containing all values initialized in this builder. */
        fun build() = DocumentAccess(
            accessOauthToken,
            accessOauthUri,
            accessPassword,
            accessPin,
            accessUserName,
            accessX509Certificate
        )
    }

    companion object Members : AttributeCollection.Converter<DocumentAccess> {
        override fun convert(attributes: List<Attribute<*>>): DocumentAccess =
            DocumentAccess(
                extractAll(attributes, accessOauthToken),
                extractOne(attributes, accessOauthUri),
                extractOne(attributes, accessPassword)?.value,
                extractOne(attributes, accessPin)?.value,
                extractOne(attributes, accessUserName)?.value,
                extractAll(attributes, accessX509Certificate),
                _encoded = attributes)
        /**
         * "access-oauth-token" member type.
         */
        @JvmField val accessOauthToken = OctetsType(Name.accessOauthToken)
        /**
         * "access-oauth-uri" member type.
         */
        @JvmField val accessOauthUri = UriType(Name.accessOauthUri)
        /**
         * "access-password" member type.
         */
        @JvmField val accessPassword = TextType(Name.accessPassword)
        /**
         * "access-pin" member type.
         */
        @JvmField val accessPin = TextType(Name.accessPin)
        /**
         * "access-user-name" member type.
         */
        @JvmField val accessUserName = TextType(Name.accessUserName)
        /**
         * "access-x509-certificate" member type.
         */
        @JvmField val accessX509Certificate = OctetsType(Name.accessX509Certificate)
    }
}
