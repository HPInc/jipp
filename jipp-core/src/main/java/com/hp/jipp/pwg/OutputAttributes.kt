// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "output-attributes" collection as defined in:
 * [PWG5100.17](http://ftp.pwg.org/pub/pwg/candidates/cs-ippscan10-20140918-5100.17.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class OutputAttributes
@JvmOverloads constructor(
    var noiseRemoval: Int? = null,
    var outputCompressionQualityFactor: Int? = null
) : AttributeCollection {

    /** Produce an attribute list from members. */
    override val attributes: List<Attribute<*>> by lazy {
        listOfNotNull(
            noiseRemoval?.let { Types.noiseRemoval.of(it) },
            outputCompressionQualityFactor?.let { Types.outputCompressionQualityFactor.of(it) }
        )
    }

    /** Type for attributes of this collection */
    class Type(override val name: String) : AttributeCollection.Type<OutputAttributes>(OutputAttributes)

    /** All member names as strings. */
    object Name {
        /** "noise-removal" member name */
        const val noiseRemoval = "noise-removal"
        /** "output-compression-quality-factor" member name */
        const val outputCompressionQualityFactor = "output-compression-quality-factor"
    }

    /** Types for each member attribute. */
    object Types {
        val noiseRemoval = IntType(Name.noiseRemoval)
        val outputCompressionQualityFactor = IntType(Name.outputCompressionQualityFactor)
    }

    /** Defines types for each member of [OutputAttributes] */
    companion object : AttributeCollection.Converter<OutputAttributes> {
        override fun convert(attributes: List<Attribute<*>>): OutputAttributes =
            OutputAttributes(
                extractOne(attributes, Types.noiseRemoval),
                extractOne(attributes, Types.outputCompressionQualityFactor)
            )
    }
}
