// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "output-attributes" collection as defined in:
 * [PWG5100.17](http://ftp.pwg.org/pub/pwg/candidates/cs-ippscan10-20140918-5100.17.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class OutputAttributes
@JvmOverloads constructor(
    val noiseRemoval: Int? = null,
    val outputCompressionQualityFactor: Int? = null,
    /** Encoded form, if known. */
    val _encoded: List<Attribute<*>>? = null
) : AttributeCollection {

    /** Produce an attribute list from members, or return the original [_encoded] attribute list if present. */
    override val attributes: List<Attribute<*>> by lazy {
        _encoded ?: listOfNotNull(
            noiseRemoval?.let { Members.noiseRemoval.of(it) },
            outputCompressionQualityFactor?.let { Members.outputCompressionQualityFactor.of(it) }
        )
    }

    /** Type for attributes of this collection */
    class Type(override val name: String) : AttributeCollection.Type<OutputAttributes>(Members)

    /** All member names as strings. */
    object Name {
        /** "noise-removal" member name */
        const val noiseRemoval = "noise-removal"
        /** "output-compression-quality-factor" member name */
        const val outputCompressionQualityFactor = "output-compression-quality-factor"
    }

    /** Builder for immutable [OutputAttributes] objects. */
    class Builder() {
        /** Constructs a new [Builder] pre-initialized with values in [source]. */
        constructor(source: OutputAttributes) : this() {
            noiseRemoval = source.noiseRemoval
            outputCompressionQualityFactor = source.outputCompressionQualityFactor
        }
        var noiseRemoval: Int? = null
        var outputCompressionQualityFactor: Int? = null

        /** Return a new [OutputAttributes] object containing all values initialized in this builder. */
        fun build() = OutputAttributes(
            noiseRemoval,
            outputCompressionQualityFactor
        )
    }

    companion object Members : AttributeCollection.Converter<OutputAttributes> {
        override fun convert(attributes: List<Attribute<*>>): OutputAttributes =
            OutputAttributes(
                extractOne(attributes, noiseRemoval),
                extractOne(attributes, outputCompressionQualityFactor),
                _encoded = attributes)
        /**
         * "noise-removal" member type.
         */
        @JvmField val noiseRemoval = IntType(Name.noiseRemoval)
        /**
         * "output-compression-quality-factor" member type.
         */
        @JvmField val outputCompressionQualityFactor = IntType(Name.outputCompressionQualityFactor)
    }
}
