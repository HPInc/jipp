// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "materials-col" collection as defined in:
 * [PWG5100.21](http://ftp.pwg.org/pub/pwg/candidates/cs-ipp3d10-20170210-5100.21.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class MaterialsCol
@JvmOverloads constructor(
    val materialAmount: Int? = null,
    /** May contain any keyword from [MaterialAmountUnit]. */
    val materialAmountUnits: String? = null,
    /** May contain any keyword from [MediaColor]. */
    val materialColor: String? = null,
    val materialDiameter: Int? = null,
    val materialDiameterTolerance: Int? = null,
    val materialFillDensity: Int? = null,
    val materialKey: String? = null,
    val materialName: String? = null,
    /** May contain any keyword from [MaterialPurpose]. */
    val materialPurpose: List<String>? = null,
    val materialRate: Int? = null,
    /** May contain any keyword from [MaterialRateUnit]. */
    val materialRateUnits: String? = null,
    val materialShellThickness: Int? = null,
    val materialTemperature: IntOrIntRange? = null,
    /** May contain any keyword from [MaterialType] or a name. */
    val materialType: String? = null,
    /** Encoded form, if known. */
    val _encoded: List<Attribute<*>>? = null
) : AttributeCollection {

    /** Produce an attribute list from members, or return the original [_encoded] attribute list if present. */
    override val attributes: List<Attribute<*>> by lazy {
        _encoded ?: listOfNotNull(
            materialAmount?.let { Members.materialAmount.of(it) },
            materialAmountUnits?.let { Members.materialAmountUnits.of(it) },
            materialColor?.let { Members.materialColor.of(it) },
            materialDiameter?.let { Members.materialDiameter.of(it) },
            materialDiameterTolerance?.let { Members.materialDiameterTolerance.of(it) },
            materialFillDensity?.let { Members.materialFillDensity.of(it) },
            materialKey?.let { Members.materialKey.of(it) },
            materialName?.let { Members.materialName.of(it) },
            materialPurpose?.let { Members.materialPurpose.of(it) },
            materialRate?.let { Members.materialRate.of(it) },
            materialRateUnits?.let { Members.materialRateUnits.of(it) },
            materialShellThickness?.let { Members.materialShellThickness.of(it) },
            materialTemperature?.let { Members.materialTemperature.of(it) },
            materialType?.let { Members.materialType.of(it) }
        )
    }

    /** Type for attributes of this collection */
    class Type(override val name: String) : AttributeCollection.Type<MaterialsCol>(Members)

    /** All member names as strings. */
    object Name {
        /** "material-amount" member name */
        const val materialAmount = "material-amount"
        /** "material-amount-units" member name */
        const val materialAmountUnits = "material-amount-units"
        /** "material-color" member name */
        const val materialColor = "material-color"
        /** "material-diameter" member name */
        const val materialDiameter = "material-diameter"
        /** "material-diameter-tolerance" member name */
        const val materialDiameterTolerance = "material-diameter-tolerance"
        /** "material-fill-density" member name */
        const val materialFillDensity = "material-fill-density"
        /** "material-key" member name */
        const val materialKey = "material-key"
        /** "material-name" member name */
        const val materialName = "material-name"
        /** "material-purpose" member name */
        const val materialPurpose = "material-purpose"
        /** "material-rate" member name */
        const val materialRate = "material-rate"
        /** "material-rate-units" member name */
        const val materialRateUnits = "material-rate-units"
        /** "material-shell-thickness" member name */
        const val materialShellThickness = "material-shell-thickness"
        /** "material-temperature" member name */
        const val materialTemperature = "material-temperature"
        /** "material-type" member name */
        const val materialType = "material-type"
    }

    /** Builder for immutable [MaterialsCol] objects. */
    class Builder() {
        /** Constructs a new [Builder] pre-initialized with values in [source]. */
        constructor(source: MaterialsCol) : this() {
            materialAmount = source.materialAmount
            materialAmountUnits = source.materialAmountUnits
            materialColor = source.materialColor
            materialDiameter = source.materialDiameter
            materialDiameterTolerance = source.materialDiameterTolerance
            materialFillDensity = source.materialFillDensity
            materialKey = source.materialKey
            materialName = source.materialName
            materialPurpose = source.materialPurpose
            materialRate = source.materialRate
            materialRateUnits = source.materialRateUnits
            materialShellThickness = source.materialShellThickness
            materialTemperature = source.materialTemperature
            materialType = source.materialType
        }
        var materialAmount: Int? = null
        /** May contain any keyword from [MaterialAmountUnit]. */
        var materialAmountUnits: String? = null
        /** May contain any keyword from [MediaColor]. */
        var materialColor: String? = null
        var materialDiameter: Int? = null
        var materialDiameterTolerance: Int? = null
        var materialFillDensity: Int? = null
        var materialKey: String? = null
        var materialName: String? = null
        /** May contain any keyword from [MaterialPurpose]. */
        var materialPurpose: List<String>? = null
        var materialRate: Int? = null
        /** May contain any keyword from [MaterialRateUnit]. */
        var materialRateUnits: String? = null
        var materialShellThickness: Int? = null
        var materialTemperature: IntOrIntRange? = null
        /** May contain any keyword from [MaterialType] or a name. */
        var materialType: String? = null

        /** Return a new [MaterialsCol] object containing all values initialized in this builder. */
        fun build() = MaterialsCol(
            materialAmount,
            materialAmountUnits,
            materialColor,
            materialDiameter,
            materialDiameterTolerance,
            materialFillDensity,
            materialKey,
            materialName,
            materialPurpose,
            materialRate,
            materialRateUnits,
            materialShellThickness,
            materialTemperature,
            materialType
        )
    }

    companion object Members : AttributeCollection.Converter<MaterialsCol> {
        override fun convert(attributes: List<Attribute<*>>): MaterialsCol =
            MaterialsCol(
                extractOne(attributes, materialAmount),
                extractOne(attributes, materialAmountUnits),
                extractOne(attributes, materialColor),
                extractOne(attributes, materialDiameter),
                extractOne(attributes, materialDiameterTolerance),
                extractOne(attributes, materialFillDensity),
                extractOne(attributes, materialKey),
                extractOne(attributes, materialName)?.value,
                extractAll(attributes, materialPurpose),
                extractOne(attributes, materialRate),
                extractOne(attributes, materialRateUnits),
                extractOne(attributes, materialShellThickness),
                extractOne(attributes, materialTemperature),
                extractOne(attributes, materialType),
                _encoded = attributes)
        /**
         * "material-amount" member type.
         */
        @JvmField val materialAmount = IntType(Name.materialAmount)
        /**
         * "material-amount-units" member type.
         * May contain any keyword from [MaterialAmountUnit].
         */
        @JvmField val materialAmountUnits = KeywordType(Name.materialAmountUnits)
        /**
         * "material-color" member type.
         * May contain any keyword from [MediaColor].
         */
        @JvmField val materialColor = KeywordType(Name.materialColor)
        /**
         * "material-diameter" member type.
         */
        @JvmField val materialDiameter = IntType(Name.materialDiameter)
        /**
         * "material-diameter-tolerance" member type.
         */
        @JvmField val materialDiameterTolerance = IntType(Name.materialDiameterTolerance)
        /**
         * "material-fill-density" member type.
         */
        @JvmField val materialFillDensity = IntType(Name.materialFillDensity)
        /**
         * "material-key" member type.
         */
        @JvmField val materialKey = KeywordType(Name.materialKey)
        /**
         * "material-name" member type.
         */
        @JvmField val materialName = NameType(Name.materialName)
        /**
         * "material-purpose" member type.
         * May contain any keyword from [MaterialPurpose].
         */
        @JvmField val materialPurpose = KeywordType(Name.materialPurpose)
        /**
         * "material-rate" member type.
         */
        @JvmField val materialRate = IntType(Name.materialRate)
        /**
         * "material-rate-units" member type.
         * May contain any keyword from [MaterialRateUnit].
         */
        @JvmField val materialRateUnits = KeywordType(Name.materialRateUnits)
        /**
         * "material-shell-thickness" member type.
         */
        @JvmField val materialShellThickness = IntType(Name.materialShellThickness)
        /**
         * "material-temperature" member type.
         */
        @JvmField val materialTemperature = IntOrIntRangeType(Name.materialTemperature)
        /**
         * "material-type" member type.
         * May contain any keyword from [MaterialType] or a name.
         */
        @JvmField val materialType = KeywordType(Name.materialType)
    }
}
