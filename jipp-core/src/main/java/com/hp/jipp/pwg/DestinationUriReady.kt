// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "destination-uri-ready" collection as defined in:
 * [PWG5100.17](http://ftp.pwg.org/pub/pwg/candidates/cs-ippscan10-20140918-5100.17.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class DestinationUriReady
@JvmOverloads constructor(
    val destinationAttributes: List<UntypedCollection>? = null,
    val destinationAttributesSupported: List<String>? = null,
    val destinationInfo: String? = null,
    val destinationIsDirectory: Boolean? = null,
    /** May contain any keyword from [DestinationAccesses.Name]. */
    val destinationMandatoryAccessAttributes: List<String>? = null,
    val destinationName: String? = null,
    val destinationOauthScope: List<ByteArray>? = null,
    val destinationOauthToken: List<ByteArray>? = null,
    val destinationOauthUri: java.net.URI? = null,
    val destinationUri: java.net.URI? = null,
    /** Encoded form, if known. */
    val _encoded: List<Attribute<*>>? = null
) : AttributeCollection {

    /** Produce an attribute list from members, or return the original [_encoded] attribute list if present. */
    override val attributes: List<Attribute<*>> by lazy {
        _encoded ?: listOfNotNull(
            destinationAttributes?.let { Members.destinationAttributes.of(it) },
            destinationAttributesSupported?.let { Members.destinationAttributesSupported.of(it) },
            destinationInfo?.let { Members.destinationInfo.of(it) },
            destinationIsDirectory?.let { Members.destinationIsDirectory.of(it) },
            destinationMandatoryAccessAttributes?.let { Members.destinationMandatoryAccessAttributes.of(it) },
            destinationName?.let { Members.destinationName.of(it) },
            destinationOauthScope?.let { Members.destinationOauthScope.of(it) },
            destinationOauthToken?.let { Members.destinationOauthToken.of(it) },
            destinationOauthUri?.let { Members.destinationOauthUri.of(it) },
            destinationUri?.let { Members.destinationUri.of(it) }
        )
    }

    /** Type for attributes of this collection */
    class Type(override val name: String) : AttributeCollection.Type<DestinationUriReady>(Members)

    /** All member names as strings. */
    object Name {
        /** "destination-attributes" member name */
        const val destinationAttributes = "destination-attributes"
        /** "destination-attributes-supported" member name */
        const val destinationAttributesSupported = "destination-attributes-supported"
        /** "destination-info" member name */
        const val destinationInfo = "destination-info"
        /** "destination-is-directory" member name */
        const val destinationIsDirectory = "destination-is-directory"
        /** "destination-mandatory-access-attributes" member name */
        const val destinationMandatoryAccessAttributes = "destination-mandatory-access-attributes"
        /** "destination-name" member name */
        const val destinationName = "destination-name"
        /** "destination-oauth-scope" member name */
        const val destinationOauthScope = "destination-oauth-scope"
        /** "destination-oauth-token" member name */
        const val destinationOauthToken = "destination-oauth-token"
        /** "destination-oauth-uri" member name */
        const val destinationOauthUri = "destination-oauth-uri"
        /** "destination-uri" member name */
        const val destinationUri = "destination-uri"
    }

    /** Builder for immutable [DestinationUriReady] objects. */
    class Builder() {
        /** Constructs a new [Builder] pre-initialized with values in [source]. */
        constructor(source: DestinationUriReady) : this() {
            destinationAttributes = source.destinationAttributes
            destinationAttributesSupported = source.destinationAttributesSupported
            destinationInfo = source.destinationInfo
            destinationIsDirectory = source.destinationIsDirectory
            destinationMandatoryAccessAttributes = source.destinationMandatoryAccessAttributes
            destinationName = source.destinationName
            destinationOauthScope = source.destinationOauthScope
            destinationOauthToken = source.destinationOauthToken
            destinationOauthUri = source.destinationOauthUri
            destinationUri = source.destinationUri
        }
        var destinationAttributes: List<UntypedCollection>? = null
        var destinationAttributesSupported: List<String>? = null
        var destinationInfo: String? = null
        var destinationIsDirectory: Boolean? = null
        /** May contain any keyword from [DestinationAccesses.Name]. */
        var destinationMandatoryAccessAttributes: List<String>? = null
        var destinationName: String? = null
        var destinationOauthScope: List<ByteArray>? = null
        var destinationOauthToken: List<ByteArray>? = null
        var destinationOauthUri: java.net.URI? = null
        var destinationUri: java.net.URI? = null

        /** Return a new [DestinationUriReady] object containing all values initialized in this builder. */
        fun build() = DestinationUriReady(
            destinationAttributes,
            destinationAttributesSupported,
            destinationInfo,
            destinationIsDirectory,
            destinationMandatoryAccessAttributes,
            destinationName,
            destinationOauthScope,
            destinationOauthToken,
            destinationOauthUri,
            destinationUri
        )
    }

    companion object Members : AttributeCollection.Converter<DestinationUriReady> {
        override fun convert(attributes: List<Attribute<*>>): DestinationUriReady =
            DestinationUriReady(
                extractAll(attributes, destinationAttributes),
                extractAll(attributes, destinationAttributesSupported),
                extractOne(attributes, destinationInfo)?.value,
                extractOne(attributes, destinationIsDirectory),
                extractAll(attributes, destinationMandatoryAccessAttributes),
                extractOne(attributes, destinationName)?.value,
                extractAll(attributes, destinationOauthScope),
                extractAll(attributes, destinationOauthToken),
                extractOne(attributes, destinationOauthUri),
                extractOne(attributes, destinationUri),
                _encoded = attributes)
        /**
         * "destination-attributes" member type.
         */
        @JvmField val destinationAttributes = UntypedCollection.Type(Name.destinationAttributes)
        /**
         * "destination-attributes-supported" member type.
         */
        @JvmField val destinationAttributesSupported = KeywordType(Name.destinationAttributesSupported)
        /**
         * "destination-info" member type.
         */
        @JvmField val destinationInfo = TextType(Name.destinationInfo)
        /**
         * "destination-is-directory" member type.
         */
        @JvmField val destinationIsDirectory = BooleanType(Name.destinationIsDirectory)
        /**
         * "destination-mandatory-access-attributes" member type.
         * May contain any keyword from [DestinationAccesses.Name].
         */
        @JvmField val destinationMandatoryAccessAttributes = KeywordType(Name.destinationMandatoryAccessAttributes)
        /**
         * "destination-name" member type.
         */
        @JvmField val destinationName = NameType(Name.destinationName)
        /**
         * "destination-oauth-scope" member type.
         */
        @JvmField val destinationOauthScope = OctetsType(Name.destinationOauthScope)
        /**
         * "destination-oauth-token" member type.
         */
        @JvmField val destinationOauthToken = OctetsType(Name.destinationOauthToken)
        /**
         * "destination-oauth-uri" member type.
         */
        @JvmField val destinationOauthUri = UriType(Name.destinationOauthUri)
        /**
         * "destination-uri" member type.
         */
        @JvmField val destinationUri = UriType(Name.destinationUri)
    }
}
