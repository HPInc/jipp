// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "print-objects" collection as defined in:
 * [PWG5100.21](http://ftp.pwg.org/pub/pwg/candidates/cs-ipp3d10-20170210-5100.21.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class PrintObjects
@JvmOverloads constructor(
    val documentNumber: Int? = null,
    val objectOffset: ObjectOffset? = null,
    val objectSize: ObjectSize? = null,
    val objectUuid: java.net.URI? = null,
    /** Encoded form, if known. */
    val _encoded: List<Attribute<*>>? = null
) : AttributeCollection {

    /** Produce an attribute list from members, or return the original [_encoded] attribute list if present. */
    override val attributes: List<Attribute<*>> by lazy {
        _encoded ?: listOfNotNull(
            documentNumber?.let { Members.documentNumber.of(it) },
            objectOffset?.let { Members.objectOffset.of(it) },
            objectSize?.let { Members.objectSize.of(it) },
            objectUuid?.let { Members.objectUuid.of(it) }
        )
    }

    /** Type for attributes of this collection */
    class Type(override val name: String) : AttributeCollection.Type<PrintObjects>(Members)

    /** All member names as strings. */
    object Name {
        /** "document-number" member name */
        const val documentNumber = "document-number"
        /** "object-offset" member name */
        const val objectOffset = "object-offset"
        /** "object-size" member name */
        const val objectSize = "object-size"
        /** "object-uuid" member name */
        const val objectUuid = "object-uuid"
    }

    /** Builder for immutable [PrintObjects] objects. */
    class Builder() {
        /** Constructs a new [Builder] pre-initialized with values in [source]. */
        constructor(source: PrintObjects) : this() {
            documentNumber = source.documentNumber
            objectOffset = source.objectOffset
            objectSize = source.objectSize
            objectUuid = source.objectUuid
        }
        var documentNumber: Int? = null
        var objectOffset: ObjectOffset? = null
        var objectSize: ObjectSize? = null
        var objectUuid: java.net.URI? = null

        /** Return a new [PrintObjects] object containing all values initialized in this builder. */
        fun build() = PrintObjects(
            documentNumber,
            objectOffset,
            objectSize,
            objectUuid
        )
    }

    companion object Members : AttributeCollection.Converter<PrintObjects> {
        override fun convert(attributes: List<Attribute<*>>): PrintObjects =
            PrintObjects(
                extractOne(attributes, documentNumber),
                extractOne(attributes, objectOffset),
                extractOne(attributes, objectSize),
                extractOne(attributes, objectUuid),
                _encoded = attributes)
        /**
         * "document-number" member type.
         */
        @JvmField val documentNumber = IntType(Name.documentNumber)
        /**
         * "object-offset" member type.
         */
        @JvmField val objectOffset = ObjectOffset.Type(Name.objectOffset)
        /**
         * "object-size" member type.
         */
        @JvmField val objectSize = ObjectSize.Type(Name.objectSize)
        /**
         * "object-uuid" member type.
         */
        @JvmField val objectUuid = UriType(Name.objectUuid)
    }

    /**
     * Data object corresponding to a "object-offset" collection.
     */
    @Suppress("RedundantCompanionReference", "unused")
    data class ObjectOffset
    @JvmOverloads constructor(
        val xOffset: Int? = null,
        val yOffset: Int? = null,
        val zOffset: Int? = null,
        /** Encoded form, if known. */
        val _encoded: List<Attribute<*>>? = null
    ) : AttributeCollection {

        /** Produce an attribute list from members, or return the original [_encoded] attribute list if present. */
        override val attributes: List<Attribute<*>> by lazy {
            _encoded ?: listOfNotNull(
                xOffset?.let { Members.xOffset.of(it) },
                yOffset?.let { Members.yOffset.of(it) },
                zOffset?.let { Members.zOffset.of(it) }
            )
        }

        /** Type for attributes of this collection */
        class Type(override val name: String) : AttributeCollection.Type<ObjectOffset>(Members)

        /** All member names as strings. */
        object Name {
            /** "x-offset" member name */
            const val xOffset = "x-offset"
            /** "y-offset" member name */
            const val yOffset = "y-offset"
            /** "z-offset" member name */
            const val zOffset = "z-offset"
        }

        /** Builder for immutable [ObjectOffset] objects. */
        class Builder() {
            /** Constructs a new [Builder] pre-initialized with values in [source]. */
            constructor(source: ObjectOffset) : this() {
                xOffset = source.xOffset
                yOffset = source.yOffset
                zOffset = source.zOffset
            }
            var xOffset: Int? = null
            var yOffset: Int? = null
            var zOffset: Int? = null

            /** Return a new [ObjectOffset] object containing all values initialized in this builder. */
            fun build() = ObjectOffset(
                xOffset,
                yOffset,
                zOffset
            )
        }

        companion object Members : AttributeCollection.Converter<ObjectOffset> {
            override fun convert(attributes: List<Attribute<*>>): ObjectOffset =
                ObjectOffset(
                    extractOne(attributes, xOffset),
                    extractOne(attributes, yOffset),
                    extractOne(attributes, zOffset),
                    _encoded = attributes)
            /**
             * "x-offset" member type.
             */
            @JvmField val xOffset = IntType(Name.xOffset)
            /**
             * "y-offset" member type.
             */
            @JvmField val yOffset = IntType(Name.yOffset)
            /**
             * "z-offset" member type.
             */
            @JvmField val zOffset = IntType(Name.zOffset)
        }
    }

    /**
     * Data object corresponding to a "object-size" collection.
     */
    @Suppress("RedundantCompanionReference", "unused")
    data class ObjectSize
    @JvmOverloads constructor(
        val xDimension: Int? = null,
        val yDimension: Int? = null,
        val zDimension: Int? = null,
        /** Encoded form, if known. */
        val _encoded: List<Attribute<*>>? = null
    ) : AttributeCollection {

        /** Produce an attribute list from members, or return the original [_encoded] attribute list if present. */
        override val attributes: List<Attribute<*>> by lazy {
            _encoded ?: listOfNotNull(
                xDimension?.let { Members.xDimension.of(it) },
                yDimension?.let { Members.yDimension.of(it) },
                zDimension?.let { Members.zDimension.of(it) }
            )
        }

        /** Type for attributes of this collection */
        class Type(override val name: String) : AttributeCollection.Type<ObjectSize>(Members)

        /** All member names as strings. */
        object Name {
            /** "x-dimension" member name */
            const val xDimension = "x-dimension"
            /** "y-dimension" member name */
            const val yDimension = "y-dimension"
            /** "z-dimension" member name */
            const val zDimension = "z-dimension"
        }

        /** Builder for immutable [ObjectSize] objects. */
        class Builder() {
            /** Constructs a new [Builder] pre-initialized with values in [source]. */
            constructor(source: ObjectSize) : this() {
                xDimension = source.xDimension
                yDimension = source.yDimension
                zDimension = source.zDimension
            }
            var xDimension: Int? = null
            var yDimension: Int? = null
            var zDimension: Int? = null

            /** Return a new [ObjectSize] object containing all values initialized in this builder. */
            fun build() = ObjectSize(
                xDimension,
                yDimension,
                zDimension
            )
        }

        companion object Members : AttributeCollection.Converter<ObjectSize> {
            override fun convert(attributes: List<Attribute<*>>): ObjectSize =
                ObjectSize(
                    extractOne(attributes, xDimension),
                    extractOne(attributes, yDimension),
                    extractOne(attributes, zDimension),
                    _encoded = attributes)
            /**
             * "x-dimension" member type.
             */
            @JvmField val xDimension = IntType(Name.xDimension)
            /**
             * "y-dimension" member type.
             */
            @JvmField val yDimension = IntType(Name.yDimension)
            /**
             * "z-dimension" member type.
             */
            @JvmField val zDimension = IntType(Name.zDimension)
        }
    }
}
