// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.pwg

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "cover-back" collection as defined in:
 * [PWG5100.3](http://ftp.pwg.org/pub/pwg/candidates/cs-ippprodprint10-20010212-5100.3.pdf),
 * [RFC8011](http://www.iana.org/go/rfc8011).
 */
@Suppress("RedundantCompanionReference", "unused")
data class CoverBack
@JvmOverloads constructor(
    /** May contain any keyword from [CoverType]. */
    val coverType: String? = null,
    /** May contain any keyword from [Media] or a name. */
    val media: String? = null,
    val mediaCol: MediaCol? = null,
    /** Original parameters received, if any. */
    val _original: List<Attribute<*>>? = null
) : AttributeCollection {

    /** Produce an attribute list from members, or return the [_original] attribute list (if it exists). */
    override val attributes: List<Attribute<*>> by lazy {
        _original ?: listOfNotNull(
            coverType?.let { Members.coverType.of(it) },
            media?.let { Members.media.of(it) },
            mediaCol?.let { Members.mediaCol.of(it) }
        )
    }

    /** Type for attributes of this collection */
    class Type(override val name: String) : AttributeCollection.Type<CoverBack>(Members)

    /** All member names as strings. */
    object Name {
        /** "cover-type" member name */
        const val coverType = "cover-type"
        /** "media" member name */
        const val media = "media"
        /** "media-col" member name */
        const val mediaCol = "media-col"
    }

    companion object Members : AttributeCollection.Converter<CoverBack> {
        override fun convert(attributes: List<Attribute<*>>): CoverBack =
            CoverBack(
                extractOne(attributes, coverType),
                extractOne(attributes, media),
                extractOne(attributes, mediaCol),
                _original = attributes)
        /**
         * "cover-type" member type.
         * May contain any keyword from [CoverType].
         */
        @JvmField val coverType = KeywordType(Name.coverType)
        /**
         * "media" member type.
         * May contain any keyword from [Media] or a name.
         */
        @JvmField val media = KeywordType(Name.media)
        /**
         * "media-col" member type.
         */
        @JvmField val mediaCol = MediaCol.Type(Name.mediaCol)
    }
}
