// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2020-02-20
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.model

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "power-state-capabilities-col" collection as defined in:
 * [PWG5100.22](https://ftp.pwg.org/pub/pwg/candidates/cs-ippsystem10-20191122-5100.22.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class PowerStateCapabilitiesCol
constructor(
    var canAcceptJobs: Boolean? = null,
    var canProcessJobs: Boolean? = null,
    var powerActiveWatts: Int? = null,
    var powerInactiveWatts: Int? = null,
    var powerState: String? = null
) : AttributeCollection {

    /** Construct an empty [PowerStateCapabilitiesCol]. */
    constructor() : this(null, null, null, null, null)

    /** Produce an attribute list from members. */
    override val attributes: List<Attribute<*>> by lazy {
        listOfNotNull(
            canAcceptJobs?.let { Types.canAcceptJobs.of(it) },
            canProcessJobs?.let { Types.canProcessJobs.of(it) },
            powerActiveWatts?.let { Types.powerActiveWatts.of(it) },
            powerInactiveWatts?.let { Types.powerInactiveWatts.of(it) },
            powerState?.let { Types.powerState.of(it) }
        )
    }

    /** Type for attributes of this collection */
    class Type(override val name: String) : AttributeCollection.Type<PowerStateCapabilitiesCol>(PowerStateCapabilitiesCol)

    /** All member names as strings. */
    object Name {
        /** "can-accept-jobs" member name */
        const val canAcceptJobs = "can-accept-jobs"
        /** "can-process-jobs" member name */
        const val canProcessJobs = "can-process-jobs"
        /** "power-active-watts" member name */
        const val powerActiveWatts = "power-active-watts"
        /** "power-inactive-watts" member name */
        const val powerInactiveWatts = "power-inactive-watts"
        /** "power-state" member name */
        const val powerState = "power-state"
    }

    /** Types for each member attribute. */
    object Types {
        val canAcceptJobs = BooleanType(Name.canAcceptJobs)
        val canProcessJobs = BooleanType(Name.canProcessJobs)
        val powerActiveWatts = IntType(Name.powerActiveWatts)
        val powerInactiveWatts = IntType(Name.powerInactiveWatts)
        val powerState = KeywordType(Name.powerState)
    }

    /** Defines types for each member of [PowerStateCapabilitiesCol] */
    companion object : AttributeCollection.Converter<PowerStateCapabilitiesCol> {
        override fun convert(attributes: List<Attribute<*>>): PowerStateCapabilitiesCol =
            PowerStateCapabilitiesCol(
                extractOne(attributes, Types.canAcceptJobs),
                extractOne(attributes, Types.canProcessJobs),
                extractOne(attributes, Types.powerActiveWatts),
                extractOne(attributes, Types.powerInactiveWatts),
                extractOne(attributes, Types.powerState)
            )
    }
    override fun toString() = "PowerStateCapabilitiesCol(${attributes.joinToString()})"
}
