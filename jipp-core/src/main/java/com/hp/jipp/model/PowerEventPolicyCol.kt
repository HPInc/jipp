// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2020-02-20
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.model

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "power-event-policy-col" collection as defined in:
 * [PWG5100.22](https://ftp.pwg.org/pub/pwg/candidates/cs-ippsystem10-20191122-5100.22.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class PowerEventPolicyCol
constructor(
    var eventId: Int? = null,
    var eventName: String? = null,
    var requestPowerState: String? = null
) : AttributeCollection {

    /** Construct an empty [PowerEventPolicyCol]. */
    constructor() : this(null, null, null)

    /** Produce an attribute list from members. */
    override val attributes: List<Attribute<*>> by lazy {
        listOfNotNull(
            eventId?.let { Types.eventId.of(it) },
            eventName?.let { Types.eventName.of(it) },
            requestPowerState?.let { Types.requestPowerState.of(it) }
        )
    }

    /** Type for attributes of this collection */
    class Type(override val name: String) : AttributeCollection.Type<PowerEventPolicyCol>(PowerEventPolicyCol)

    /** All member names as strings. */
    object Name {
        /** "event-id" member name */
        const val eventId = "event-id"
        /** "event-name" member name */
        const val eventName = "event-name"
        /** "request-power-state" member name */
        const val requestPowerState = "request-power-state"
    }

    /** Types for each member attribute. */
    object Types {
        val eventId = IntType(Name.eventId)
        val eventName = NameType(Name.eventName)
        val requestPowerState = KeywordType(Name.requestPowerState)
    }

    /** Defines types for each member of [PowerEventPolicyCol] */
    companion object : AttributeCollection.Converter<PowerEventPolicyCol> {
        override fun convert(attributes: List<Attribute<*>>): PowerEventPolicyCol =
            PowerEventPolicyCol(
                extractOne(attributes, Types.eventId),
                extractOne(attributes, Types.eventName)?.value,
                extractOne(attributes, Types.requestPowerState)
            )
    }
    override fun toString() = "PowerEventPolicyCol(${attributes.joinToString()})"
}
