// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2020-02-20
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.model

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "system-configured-resources" collection as defined in:
 * [PWG5100.22](https://ftp.pwg.org/pub/pwg/candidates/cs-ippsystem10-20191122-5100.22.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class SystemConfiguredResources
constructor(
    var resourceFormat: String? = null,
    var resourceId: Int? = null,
    var resourceInfo: String? = null,
    var resourceName: String? = null,
    var resourceState: ResourceState? = null,
    /** May contain any keyword from [ResourceType]. */
    var resourceType: String? = null
) : AttributeCollection {

    /** Construct an empty [SystemConfiguredResources]. */
    constructor() : this(null, null, null, null, null, null)

    /** Produce an attribute list from members. */
    override val attributes: List<Attribute<*>> by lazy {
        listOfNotNull(
            resourceFormat?.let { Types.resourceFormat.of(it) },
            resourceId?.let { Types.resourceId.of(it) },
            resourceInfo?.let { Types.resourceInfo.of(it) },
            resourceName?.let { Types.resourceName.of(it) },
            resourceState?.let { Types.resourceState.of(it) },
            resourceType?.let { Types.resourceType.of(it) }
        )
    }

    /** Type for attributes of this collection */
    class Type(override val name: String) : AttributeCollection.Type<SystemConfiguredResources>(SystemConfiguredResources)

    /** All member names as strings. */
    object Name {
        /** "resource-format" member name */
        const val resourceFormat = "resource-format"
        /** "resource-id" member name */
        const val resourceId = "resource-id"
        /** "resource-info" member name */
        const val resourceInfo = "resource-info"
        /** "resource-name" member name */
        const val resourceName = "resource-name"
        /** "resource-state" member name */
        const val resourceState = "resource-state"
        /** "resource-type" member name */
        const val resourceType = "resource-type"
    }

    /** Types for each member attribute. */
    object Types {
        val resourceFormat = StringType(Tag.mimeMediaType, Name.resourceFormat)
        val resourceId = IntType(Name.resourceId)
        val resourceInfo = TextType(Name.resourceInfo)
        val resourceName = NameType(Name.resourceName)
        /**
         * "resource-state" member type.
         */
        val resourceState = ResourceState.Type(Name.resourceState)
        val resourceType = KeywordType(Name.resourceType)
    }

    /** Defines types for each member of [SystemConfiguredResources] */
    companion object : AttributeCollection.Converter<SystemConfiguredResources> {
        override fun convert(attributes: List<Attribute<*>>): SystemConfiguredResources =
            SystemConfiguredResources(
                extractOne(attributes, Types.resourceFormat),
                extractOne(attributes, Types.resourceId),
                extractOne(attributes, Types.resourceInfo)?.value,
                extractOne(attributes, Types.resourceName)?.value,
                extractOne(attributes, Types.resourceState),
                extractOne(attributes, Types.resourceType)
            )
    }
    override fun toString() = "SystemConfiguredResources(${attributes.joinToString()})"
}
