// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2020-02-20
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.model

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "media-col" collection as defined in:
 * [IPPLABEL](https://ftp.pwg.org/pub/pwg/ipp/registrations/reg-ipplabel10-20200213.pdf),
 * [PWG5100.7](https://ftp.pwg.org/pub/pwg/candidates/cs-ippjobext20-20190816-5100.7.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class MediaCol
constructor(
    var mediaTopOffset: Int? = null,
    /** May contain any keyword from [MediaTracking]. */
    var mediaTracking: String? = null
) : AttributeCollection {

    /** Construct an empty [MediaCol]. */
    constructor() : this(null, null)

    /** Produce an attribute list from members. */
    override val attributes: List<Attribute<*>> by lazy {
        listOfNotNull(
            mediaTopOffset?.let { Types.mediaTopOffset.of(it) },
            mediaTracking?.let { Types.mediaTracking.of(it) }
        )
    }

    /** Type for attributes of this collection */
    class Type(override val name: String) : AttributeCollection.Type<MediaCol>(MediaCol)

    /** All member names as strings. */
    object Name {
        /** "media-top-offset" member name */
        const val mediaTopOffset = "media-top-offset"
        /** "media-tracking" member name */
        const val mediaTracking = "media-tracking"
    }

    /** Types for each member attribute. */
    object Types {
        val mediaTopOffset = IntType(Name.mediaTopOffset)
        val mediaTracking = KeywordType(Name.mediaTracking)
    }

    /** Defines types for each member of [MediaCol] */
    companion object : AttributeCollection.Converter<MediaCol> {
        override fun convert(attributes: List<Attribute<*>>): MediaCol =
            MediaCol(
                extractOne(attributes, Types.mediaTopOffset),
                extractOne(attributes, Types.mediaTracking)
            )
    }
}
