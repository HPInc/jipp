// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2018-04-06
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.model

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "destination-uri-ready" collection as defined in:
 * [PWG5100.17](http://ftp.pwg.org/pub/pwg/candidates/cs-ippscan10-20140918-5100.17.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class DestinationUriReady
@JvmOverloads constructor(
    var destinationAttributes: List<UntypedCollection>? = null,
    var destinationAttributesSupported: List<String>? = null,
    var destinationInfo: String? = null,
    var destinationIsDirectory: Boolean? = null,
    /** May contain any keyword from [DestinationAccesses.Name]. */
    var destinationMandatoryAccessAttributes: List<String>? = null,
    var destinationName: String? = null,
    var destinationOauthScope: List<ByteArray>? = null,
    var destinationOauthToken: List<ByteArray>? = null,
    var destinationOauthUri: java.net.URI? = null,
    var destinationUri: java.net.URI? = null
) : AttributeCollection {

    /** Produce an attribute list from members. */
    override val attributes: List<Attribute<*>> by lazy {
        listOfNotNull(
            destinationAttributes?.let { Types.destinationAttributes.of(it) },
            destinationAttributesSupported?.let { Types.destinationAttributesSupported.of(it) },
            destinationInfo?.let { Types.destinationInfo.of(it) },
            destinationIsDirectory?.let { Types.destinationIsDirectory.of(it) },
            destinationMandatoryAccessAttributes?.let { Types.destinationMandatoryAccessAttributes.of(it) },
            destinationName?.let { Types.destinationName.of(it) },
            destinationOauthScope?.let { Types.destinationOauthScope.of(it) },
            destinationOauthToken?.let { Types.destinationOauthToken.of(it) },
            destinationOauthUri?.let { Types.destinationOauthUri.of(it) },
            destinationUri?.let { Types.destinationUri.of(it) }
        )
    }

    /** Type for attributes of this collection */
    class Type(override val name: String) : AttributeCollection.Type<DestinationUriReady>(DestinationUriReady)

    /** All member names as strings. */
    object Name {
        /** "destination-attributes" member name */
        const val destinationAttributes = "destination-attributes"
        /** "destination-attributes-supported" member name */
        const val destinationAttributesSupported = "destination-attributes-supported"
        /** "destination-info" member name */
        const val destinationInfo = "destination-info"
        /** "destination-is-directory" member name */
        const val destinationIsDirectory = "destination-is-directory"
        /** "destination-mandatory-access-attributes" member name */
        const val destinationMandatoryAccessAttributes = "destination-mandatory-access-attributes"
        /** "destination-name" member name */
        const val destinationName = "destination-name"
        /** "destination-oauth-scope" member name */
        const val destinationOauthScope = "destination-oauth-scope"
        /** "destination-oauth-token" member name */
        const val destinationOauthToken = "destination-oauth-token"
        /** "destination-oauth-uri" member name */
        const val destinationOauthUri = "destination-oauth-uri"
        /** "destination-uri" member name */
        const val destinationUri = "destination-uri"
    }

    /** Types for each member attribute. */
    object Types {
        val destinationAttributes = UntypedCollection.Type(Name.destinationAttributes)
        val destinationAttributesSupported = KeywordType(Name.destinationAttributesSupported)
        val destinationInfo = TextType(Name.destinationInfo)
        val destinationIsDirectory = BooleanType(Name.destinationIsDirectory)
        val destinationMandatoryAccessAttributes = KeywordType(Name.destinationMandatoryAccessAttributes)
        val destinationName = NameType(Name.destinationName)
        val destinationOauthScope = OctetsType(Name.destinationOauthScope)
        val destinationOauthToken = OctetsType(Name.destinationOauthToken)
        val destinationOauthUri = UriType(Name.destinationOauthUri)
        val destinationUri = UriType(Name.destinationUri)
    }

    /** Defines types for each member of [DestinationUriReady] */
    companion object : AttributeCollection.Converter<DestinationUriReady> {
        override fun convert(attributes: List<Attribute<*>>): DestinationUriReady =
            DestinationUriReady(
                extractAll(attributes, Types.destinationAttributes),
                extractAll(attributes, Types.destinationAttributesSupported),
                extractOne(attributes, Types.destinationInfo)?.value,
                extractOne(attributes, Types.destinationIsDirectory),
                extractAll(attributes, Types.destinationMandatoryAccessAttributes),
                extractOne(attributes, Types.destinationName)?.value,
                extractAll(attributes, Types.destinationOauthScope),
                extractAll(attributes, Types.destinationOauthToken),
                extractOne(attributes, Types.destinationOauthUri),
                extractOne(attributes, Types.destinationUri)
            )
    }
}
