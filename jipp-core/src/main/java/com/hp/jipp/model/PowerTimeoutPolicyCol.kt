// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2020-02-20
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.model

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "power-timeout-policy-col" collection as defined in:
 * [PWG5100.22](https://ftp.pwg.org/pub/pwg/candidates/cs-ippsystem10-20191122-5100.22.pdf).
 */
@Suppress("RedundantCompanionReference", "unused")
data class PowerTimeoutPolicyCol
constructor(
    var startPowerState: String? = null,
    var timeoutId: Int? = null,
    /** May contain any keyword from [TimeoutPredicate]. */
    var timeoutPredicate: String? = null,
    var timeoutSeconds: Int? = null
) : AttributeCollection {

    /** Construct an empty [PowerTimeoutPolicyCol]. */
    constructor() : this(null, null, null, null)

    /** Produce an attribute list from members. */
    override val attributes: List<Attribute<*>> by lazy {
        listOfNotNull(
            startPowerState?.let { Types.startPowerState.of(it) },
            timeoutId?.let { Types.timeoutId.of(it) },
            timeoutPredicate?.let { Types.timeoutPredicate.of(it) },
            timeoutSeconds?.let { Types.timeoutSeconds.of(it) }
        )
    }

    /** Type for attributes of this collection */
    class Type(override val name: String) : AttributeCollection.Type<PowerTimeoutPolicyCol>(PowerTimeoutPolicyCol)

    /** All member names as strings. */
    object Name {
        /** "start-power-state" member name */
        const val startPowerState = "start-power-state"
        /** "timeout-id" member name */
        const val timeoutId = "timeout-id"
        /** "timeout-predicate" member name */
        const val timeoutPredicate = "timeout-predicate"
        /** "timeout-seconds" member name */
        const val timeoutSeconds = "timeout-seconds"
    }

    /** Types for each member attribute. */
    object Types {
        val startPowerState = KeywordType(Name.startPowerState)
        val timeoutId = IntType(Name.timeoutId)
        val timeoutPredicate = KeywordType(Name.timeoutPredicate)
        val timeoutSeconds = IntType(Name.timeoutSeconds)
    }

    /** Defines types for each member of [PowerTimeoutPolicyCol] */
    companion object : AttributeCollection.Converter<PowerTimeoutPolicyCol> {
        override fun convert(attributes: List<Attribute<*>>): PowerTimeoutPolicyCol =
            PowerTimeoutPolicyCol(
                extractOne(attributes, Types.startPowerState),
                extractOne(attributes, Types.timeoutId),
                extractOne(attributes, Types.timeoutPredicate),
                extractOne(attributes, Types.timeoutSeconds)
            )
    }
    override fun toString() = "PowerTimeoutPolicyCol(${attributes.joinToString()})"
}
