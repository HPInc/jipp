// Global settings
buildscript {
    ext.kotlin_version = '1.2.31'
    ext.dokka_version = '0.9.16'
    repositories {
        jcenter()
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.9"
        classpath "gradle.plugin.pl.squirrel:classycle-gradle-plugin:1.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"

        classpath "gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:2.1.1"
        classpath "gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.0.0.RC6-3"
    }
}

apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'net.ltgt.apt'
apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'io.gitlab.arturbosch.detekt'
apply plugin: 'maven-publish'
apply plugin: 'signing'

repositories {
    mavenCentral()
    jcenter()
    maven() {
        url = "https://plugins.gradle.org/m2/"
    }
}

version = '0.5.0'
group = 'com.hp.jipp'

targetCompatibility = 1.6
sourceCompatibility = 1.6

// This hack puts testing resource files where we can get to them
task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources/printer"
    into "${buildDir}/classes/test/printer"
}
processTestResources.dependsOn copyTestResources
task cleanTestResources(type: Delete) {
    delete fileTree("${buildDir}/classes/test/printer") {
        include '**/*.bin'
    }
}
test.finalizedBy cleanTestResources

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

dokka {
    outputDirectory = "$buildDir/javadoc"
    outputFormat = "javadoc"
    externalDocumentationLink {
        url = new URL("http://docs.oracle.com/javase/8/docs/api/")
    }
}

test.finalizedBy jacocoTestReport

test {
    testLogging {
        events "failed"
        showExceptions true
        exceptionFormat "full"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true // coveralls plugin depends on xml format report
        html.enabled true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/AutoValue_**'])
        })
    }
}

ktlint {
    version = '0.10.0'
}

detekt {
    profile("main") {
        baseline = "$projectDir/src/config/baseline.xml"
        input = "$projectDir/src/main"
        output = "$buildDir/reports/detekt"
    }
}

// Graph dependencies
task graphDeps(type: Exec) {
    commandLine 'bin/graphDeps'
}

configure(graphDeps) {
    group = "Verification"
    description = "Create a dependency graph"
}

afterEvaluate {
    graphDeps.dependsOn classes

    check.dependsOn ktlintCheck
    check.dependsOn detektCheck
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId "com.hp.jipp"
            artifactId 'jipp-core'

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]

                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            //url "https://oss.sonatype.org/content/repositories/snapshots"
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Parse/build IPP packets'
            name 'jipp-core'
            url 'https://github.com/HPInc/jipp-core'
            organization {
                name 'HP Development Company, L.P.'
                url 'https://github.com/HPInc'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/HPInc/jipp-core/issues'
            }
            licenses {
                license {
                    name 'MIT'
                    url 'https://github.com/HPInc/jipp-core/blob/master/LICENSE.md'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/HPInc/jipp-core'
                connection 'scm:git:git://github.com/HPInc/jipp-core.git'
                developerConnection 'scm:git:ssh://git@github.com:HPInc/jipp-core.git'
            }
            developers {
                developer {
                    name 'Glade Diviney'
                }
            }
        }
    }
}


model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }

    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }

    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
}
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.15.0'
}
